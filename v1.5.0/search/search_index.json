{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#autoagora","title":"AutoAgora","text":"<p>AutoAgora is beta software. Please use responsibly, monitor it (Prometheus metrics) , write issues and contribute!</p> <p>An Agora cost model automation tool for The Graph indexers:</p> <ul> <li>Automates the creation of relative prices for commonly seen query skeletons. (Off by default).</li> <li>Continuously tunes a per-subgraph absolute price multiplier, using continuous online reinforcement learning.</li> </ul>"},{"location":"#indexers-guide","title":"Indexer's guide","text":""},{"location":"#installation","title":"Installation","text":"<p>We recommend using the AutoAgora container at <code>ghcr.io/semiotic-ai/autoagora</code>.</p>"},{"location":"#build","title":"Build","text":"<p>If you'd like to build the container yourself, we recommend that you download the repo with <code>git</code> rather than downloading a tarball:</p> <pre><code>git clone https://github.com/semiotic-ai/autoagora.git\n</code></pre> <p>So that the build process can read the <code>git</code> metadata from the repo:</p> <pre><code>cd autoagora\ndocker build -t autoagora .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>For AutoAgora's relative query costs generator, you will also need to set up:</p> <ul> <li>AutoAgora indexer-service</li> <li>AutoAgora Processor</li> </ul> <p>AutoAgora will continuously:</p> <ul> <li>Watch for the indexer's current allocations by querying the <code>indexer-agent</code>'s management GraphQL endpoint.</li> <li>Analyze the query logs stored in a PostgreSQL database (relative query costs generator) -- logs that were previously   processed by the <code>AutoAgora indexer-service</code> wrapper and the <code>AutoAgora Processor</code>.</li> <li>Gather query metrics from the <code>indexer-service</code>'s prometheus metrics endpoint.</li> <li>Update the allocated subgraph's cost models by sending mutations to the <code>indexer-agent</code>'s management GraphQL endpoint.</li> </ul> <p>Therefore, only a single instance of <code>AutoAgora</code> should be running against an <code>indexer-agent</code>.</p> <p>Configuration:</p> <pre><code>usage: autoagora [-h] [--log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [--json-logs JSON_LOGS]\n                 --postgres-host POSTGRES_HOST [--postgres-port POSTGRES_PORT]\n                 [--postgres-database POSTGRES_DATABASE] --postgres-username POSTGRES_USERNAME\n                 --postgres-password POSTGRES_PASSWORD\n                 [--postgres-max-connections POSTGRES_MAX_CONNECTIONS]\n                 --indexer-agent-mgmt-endpoint INDEXER_AGENT_MGMT_ENDPOINT\n                 (--indexer-service-metrics-endpoint INDEXER_SERVICE_METRICS_ENDPOINT | --indexer-service-metrics-k8s-service INDEXER_SERVICE_METRICS_K8S_SERVICE)\n                 [--qps-observation-duration QPS_OBSERVATION_DURATION] [--relative-query-costs]\n                 [--relative-query-costs-exclude-subgraphs RELATIVE_QUERY_COSTS_EXCLUDE_SUBGRAPHS]\n                 [--relative-query-costs-refresh-interval RELATIVE_QUERY_COSTS_REFRESH_INTERVAL]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\n                        [env var: LOG_LEVEL] (default: WARNING)\n  --json-logs JSON_LOGS\n                        Output logs in JSON format. Compatible with GKE. [env var: JSON_LOGS]\n                        (default: False)\n  --indexer-agent-mgmt-endpoint INDEXER_AGENT_MGMT_ENDPOINT\n                        URL to the indexer-agent management GraphQL endpoint. [env var:\n                        INDEXER_AGENT_MGMT_ENDPOINT] (default: None)\n  --qps-observation-duration QPS_OBSERVATION_DURATION\n                        Duration of the measurement period of the query-per-second after a price\n                        multiplier update. [env var: QPS_OBSERVATION_DURATION] (default: 60)\n\nDatabase settings:\n  Must be the same database as AutoAgora Processor's if the relative costs models generator is\n  enabled.\n\n  --postgres-host POSTGRES_HOST\n                        Host of the postgres instance to be used by AutoAgora. [env var:\n                        POSTGRES_HOST] (default: None)\n  --postgres-port POSTGRES_PORT\n                        Port of the postgres instance to be used by AutoAgora. [env var:\n                        POSTGRES_PORT] (default: 5432)\n  --postgres-database POSTGRES_DATABASE\n                        Name of the database to be used by AutoAgora. [env var:\n                        POSTGRES_DATABASE] (default: autoagora)\n  --postgres-username POSTGRES_USERNAME\n                        Username for the database to be used by AutoAgora. [env var:\n                        POSTGRES_USERNAME] (default: None)\n  --postgres-password POSTGRES_PASSWORD\n                        Password for the database to be used by AutoAgora. [env var:\n                        POSTGRES_PASSWORD] (default: None)\n  --postgres-max-connections POSTGRES_MAX_CONNECTIONS\n                        Maximum postgres connections (internal pool). [env var:\n                        POSTGRES_MAX_CONNECTIONS] (default: 1)\n\nIndexer-service metrics endpoint. Exactly one argument required:\n  --indexer-service-metrics-endpoint INDEXER_SERVICE_METRICS_ENDPOINT\n                        HTTP endpoint for the indexer-service metrics. Can be a comma-separated\n                        for multiple endpoints. [env var: INDEXER_SERVICE_METRICS_ENDPOINT]\n                        (default: None)\n  --indexer-service-metrics-k8s-service INDEXER_SERVICE_METRICS_K8S_SERVICE\n                        Kubernetes service name for the indexer-service and pod port serving its\n                        metrics. Will watch the service's endpoint IPs continuously for changes.\n                        Format: &lt;scheme&gt;://&lt;service_name&gt;:&lt;pod_metrics_port&gt;/&lt;path&gt;. [env var:\n                        INDEXER_SERVICE_METRICS_K8S_SERVICE] (default: None)\n\nRelative query costs generator settings:\n  --relative-query-costs\n                        (EXPERIMENTAL) Enables the relative query cost generator. Otherwise only\n                        builds a default query pricing model with automated market price\n                        discovery. [env var: RELATIVE_QUERY_COSTS] (default: False)\n  --relative-query-costs-exclude-subgraphs RELATIVE_QUERY_COSTS_EXCLUDE_SUBGRAPHS\n                        Comma delimited list of subgraphs (ipfs hash) to exclude from the\n                        relative query costs model generator. [env var:\n                        RELATIVE_QUERY_COSTS_EXCLUDE_SUBGRAPHS] (default: None)\n  --relative-query-costs-refresh-interval RELATIVE_QUERY_COSTS_REFRESH_INTERVAL\n                        (Seconds) Interval between rebuilds of the relative query costs models.\n                        [env var: RELATIVE_QUERY_COSTS_REFRESH_INTERVAL] (default: 3600)\n\n If an arg is specified in more than one place, then commandline values override environment\nvariables which override defaults.\n</code></pre> <p>AutoAgora also exposes metrics for Prometheus on port <code>8000</code> (Example values):</p> <pre><code># HELP bandit_reward Reward of the bandit training: queries_per_second * price_multiplier.\n# TYPE bandit_reward gauge\nbandit_reward{subgraph=\"QmRDGLp6BHwiH9HAE2NYEE3f7LrKuRqziHBv76trT4etgU\"} 1.577651313168855e-07\n# HELP bandit_price_multiplier Price multiplier sampled from the Gaussian model.\n# TYPE bandit_price_multiplier gauge\nbandit_price_multiplier{subgraph=\"QmRDGLp6BHwiH9HAE2NYEE3f7LrKuRqziHBv76trT4etgU\"} 2.60150080442184e-07\n# HELP bandit_stddev Standard deviation of the Gaussian price multiplier model.\n# TYPE bandit_stddev gauge\nbandit_stddev{subgraph=\"QmRDGLp6BHwiH9HAE2NYEE3f7LrKuRqziHBv76trT4etgU\"} 1.843469500541687\n# HELP bandit_mean Mean of the Gaussian price multiplier model.\n# TYPE bandit_mean gauge\nbandit_mean{subgraph=\"QmRDGLp6BHwiH9HAE2NYEE3f7LrKuRqziHBv76trT4etgU\"} 3.653126148672616e-05\n</code></pre> <p>Where \"bandit\" refers to the reinforcement learning method (Continuum-armed bandit) used to track the market price for each subgraph.</p>"},{"location":"#developers-guide","title":"Developer's guide","text":"<p>If you would like to contribute, please consult <code>CONTRIBUTING.md</code>.</p>"},{"location":"#installation-directly-from-the-source-code","title":"Installation directly from the source code","text":"<p>To install AutoAgora directly from the source code please clone the repository and install package in the virtual environment using <code>poetry</code>:</p> <pre><code>git clone https://github.com/semiotic-ai/autoagora.git\ncd autoagora\npoetry install\n</code></pre>"},{"location":"#running-the-autoagora-code","title":"Running the AutoAgora code","text":"<p>All scripts should be executed in the virtual environment managed by <code>poetry</code>.</p>"},{"location":"#running-the-test-suite","title":"Running the test suite","text":"<pre><code>poetry run python -m pytest\n</code></pre>"}]}