import os
import re
import shutil
import tempfile
from unittest import mock

import asyncpg
import pytest
from platformdirs import user_config_dir

from autoagora import model_builder
from autoagora.config import init_config
from autoagora.logs_db import LogsDB
from tests.utils.constants import TEST_MANUAL_AGORA_ENTRY, TEST_QUERY_1, TEST_QUERY_2


class TestModelBuilder:
    @pytest.fixture
    async def pgpool(self, postgresql):
        pool = await asyncpg.create_pool(
            host=postgresql.info.host,
            database=postgresql.info.dbname,
            user=postgresql.info.user,
            password=postgresql.info.password,
            port=postgresql.info.port,
        )
        assert pool
        yield pool
        await pool.close()

    async def test_build_model(self, pgpool, postgresql):
        with mock.patch(
            "autoagora.logs_db.LogsDB.get_most_frequent_queries"
        ) as mock_get_mfq:
            mock_get_mfq.return_value = [
                LogsDB.QueryStats(
                    query=TEST_QUERY_1,
                    count=100,
                    min_time=1,
                    max_time=60,
                    avg_time=1.2,
                    stddev_time=0.5,
                ),
                LogsDB.QueryStats(
                    query=TEST_QUERY_2,
                    count=10,
                    min_time=3,
                    max_time=20,
                    avg_time=13.2,
                    stddev_time=0.7,
                ),
            ]
            init_config(
                [
                    "--indexer-agent-mgmt-endpoint",
                    "http://nowhere",
                    "--postgres-host",
                    postgresql.info.host,
                    "--postgres-username",
                    postgresql.info.user,
                    "--postgres-password",
                    postgresql.info.password,
                    "--postgres-port",
                    str(postgresql.info.port),
                    "--postgres-database",
                    postgresql.info.dbname,
                    "--indexer-service-metrics-endpoint",
                    "http://indexer-service.default.svc.cluster.local:7300/metrics",
                ]
            )
            model = await model_builder.model_builder(
                "Qmadj8x9km1YEyKmRnJ6EkC2zpJZFCfTyTZpuqC3j6e1QH", pgpool
            )
            pattern = r"# Generated by AutoAgora \d+\.\d+\.\d+"
            # To ensure a version is being obtained
            assert re.match(pattern, model), f"{model} does not match pattern {pattern}"
            assert TEST_QUERY_1 in model
            assert TEST_QUERY_2 in model
            assert TEST_MANUAL_AGORA_ENTRY not in model

    async def test_build_model_with_manual_entry(self, pgpool, postgresql):
        # Creates a temp file and dir to simulate manual entries
        file_type = ".agora"
        os.makedirs(user_config_dir("autoagora"), exist_ok=True)
        temp_file = tempfile.NamedTemporaryFile(
            suffix=file_type, dir=user_config_dir("autoagora"), delete=False
        )
        byte_entry = bytes(TEST_MANUAL_AGORA_ENTRY, "ascii")
        temp_file.write(byte_entry)
        temp_file.close()
        with mock.patch(
            "autoagora.logs_db.LogsDB.get_most_frequent_queries"
        ) as mock_get_mfq:
            mock_get_mfq.return_value = [
                LogsDB.QueryStats(
                    query=TEST_QUERY_1,
                    count=100,
                    min_time=1,
                    max_time=60,
                    avg_time=1.2,
                    stddev_time=0.5,
                ),
                LogsDB.QueryStats(
                    query=TEST_QUERY_2,
                    count=10,
                    min_time=3,
                    max_time=20,
                    avg_time=13.2,
                    stddev_time=0.7,
                ),
            ]
            init_config(
                [
                    "--indexer-agent-mgmt-endpoint",
                    "http://nowhere",
                    "--postgres-host",
                    postgresql.info.host,
                    "--postgres-username",
                    postgresql.info.user,
                    "--postgres-password",
                    postgresql.info.password,
                    "--postgres-port",
                    str(postgresql.info.port),
                    "--postgres-database",
                    postgresql.info.dbname,
                    "--indexer-service-metrics-endpoint",
                    "http://indexer-service.default.svc.cluster.local:7300/metrics",
                ]
            )
            model = await model_builder.model_builder(
                "Qmadj8x9km1YEyKmRnJ6EkC2zpJZFCfTyTZpuqC3j6e1QH", pgpool
            )
            # Removes temp dir and its files
            shutil.rmtree(user_config_dir("autoagora"))
            pattern = r"# Generated by AutoAgora \d+\.\d+\.\d+"
            # To ensure a version is being obtained
            assert re.match(pattern, model), f"{model} does not match pattern {pattern}"
            assert TEST_QUERY_1 in model
            assert TEST_QUERY_2 in model
            assert TEST_MANUAL_AGORA_ENTRY in model
